{"version":3,"sources":["webpack:///node_modules/@angular/common/fesm2015/http.js","webpack:///src/app/components/product-management/GetProductResolver.ts","webpack:///src/app/components/product-management/add-product/add-product.component.html","webpack:///src/app/components/product-management/add-product/add-product.component.ts","webpack:///src/app/components/product-management/edit-product/edit-product.component.html","webpack:///src/app/components/product-management/edit-product/edit-product.component.ts","webpack:///src/app/components/product-management/product-management.module.ts","webpack:///src/app/components/product-management/product/product.component.html","webpack:///src/app/components/product-management/product/product.component.ts","webpack:///src/app/components/product-management/products/products.component.html","webpack:///src/app/components/product-management/products/products.component.ts","webpack:///src/app/components/product-management/services/product.service.ts","webpack:///src/app/models/product.ts","webpack:///src/app/shared/auth.guard.ts","webpack:///src/app/shared/authorization-guard.guard.ts","webpack:///src/app/shared/can-deactivate.guard.ts","webpack:///src/app/shared/custom-validators.ts","webpack:///src/app/shared/hover-higlight.directive.ts","webpack:///src/app/shared/mixed-case.pipe.ts","webpack:///src/app/shared/no-space.directive.ts"],"names":["HttpHandler","HttpBackend","Update","HttpHeaders","headers","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","index","indexOf","name","slice","key","toLowerCase","value","trim","maybeSetNormalizedName","has","get","push","set","Object","keys","values","length","init","Array","from","clone","op","lcName","copyFrom","update","applyUpdate","other","concat","base","undefined","toDelete","existing","filter","fn","HttpParameterCodec","HttpUrlEncodingCodec","standardEncoding","decodeURIComponent","paramParser","rawParams","codec","map","params","param","eqIdx","decodeKey","decodeValue","val","list","v","encodeURIComponent","replace","Update$1","HttpParamsOptions","HttpParams","options","updates","cloneFrom","encoder","fromString","fromObject","Error","isArray","res","eKey","encodeKey","encodeValue","join","idx","splice","HttpRequestInit","mightHaveBody","method","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","HttpRequest","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","urlWithParams","toString","qIdx","sep","JSON","stringify","type","setHeaders","reduce","setParams","HttpEventType","Sent","UploadProgress","ResponseHeader","DownloadProgress","Response","User","HttpProgressEvent","HttpDownloadProgressEvent","HttpUploadProgressEvent","HttpSentEvent","HttpUserEvent","HttpJsonParseError","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","HttpResponse","HttpErrorResponse","message","error","addBody","observe","HttpClient","handler","first","req","events$","pipe","handle","res$","event","request","callbackParam","append","decorators","ctorParameters","HttpInterceptor","HttpInterceptorHandler","next","interceptor","intercept","HTTP_INTERCEPTORS","NoopInterceptor","nextRequestId","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONP_ERR_WRONG_RESPONSE_TYPE","JsonpCallbackContext","JsonpClientBackend","callbackMap","document","observer","callback","nextCallback","node","createElement","src","finished","cancelled","data","cleanup","parentNode","removeChild","onLoad","complete","onError","addEventListener","appendChild","removeEventListener","args","JsonpInterceptor","jsonp","XSSI_PREFIX","getResponseUrl","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","XhrFactory","BrowserXhr","XMLHttpRequest","PartialResponse","HttpXhrBackend","xhrFactory","build","open","setRequestHeader","detectedType","detectContentTypeHeader","reqBody","serializeBody","headerResponse","partialFromXhr","response","responseText","originalBody","parse","text","sentHeaders","onDownProgress","progressEvent","loaded","lengthComputable","total","partialText","onUpProgress","progress","upload","send","abort","XSRF_COOKIE_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","cookieString","cookie","String","HttpXsrfInterceptor","tokenService","headerName","lcUrl","startsWith","token","getToken","HttpInterceptingHandler","backend","injector","chain","interceptors","reduceRight","interceptingHandler","jsonpCallbackContext","window","HttpClientXsrfModule","ngModule","providers","provide","useClass","useValue","useExisting","multi","HttpClientModule","imports","withOptions","HttpClientJsonpModule","useFactory","GetProductResolver","productService","route","state","id","paramMap","pr","getProduct","console","log","AddProductComponent","formBuilder","tagArray","b","productForm","dirty","submitted","confirm","product","fragile","brands$","getBrands","addProductForm","group","disabled","required","minLength","maxLength","brand","tags","array","control","tagsTD","productRF","addProduct","EditProductComponent","fb","snapshot","productFormGroup","patchValue","updateProduct","ProductManagementModule","ProductComponent","likeCountChanged","likeCount","emit","ProductsComponent","titleService","products","setTitle","products$","getProducts","productSubscription","subscribe","err","sort","a","unsubscribe","ProductService","httpClient","brands","newid","p","find","f","p1","price","sellBy","Date","p2","p3","Product","Brand","AuthenticationGuard","userService","AuthorizationGuardGuard","CanDeactivateGuard","component","canComponentBeDeactivated","noSpaces","spacesRegex","regex","RegExp","isJustSpaces","somekey","noSpaces2","num","c","HoverHiglightDirective","element","nativeElement","style","color","appHighlightColor","foreColor","backgroundColor","backColor","MixedCasePipe","i","NoSpaceDirective"],"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","file":"components-product-management-product-management-module-ngfactory-es5.js","sourcesContent":["/**\n * @license Angular v9.1.11\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, Injector, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\nimport { DOCUMENT, ɵparseCookieValue } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/src/backend.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpHandler {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} req\n     * @return {?}\n     */\n    HttpHandler.prototype.handle = function (req) { };\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpBackend {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} req\n     * @return {?}\n     */\n    HttpBackend.prototype.handle = function (req) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/src/headers.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @record\n */\nfunction Update() { }\nif (false) {\n    /** @type {?} */\n    Update.prototype.name;\n    /** @type {?|undefined} */\n    Update.prototype.value;\n    /** @type {?} */\n    Update.prototype.op;\n}\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * \\@publicApi\n */\nclass HttpHeaders {\n    /**\n     * Constructs a new HTTP header object with the given values.\n     * @param {?=} headers\n     */\n    constructor(headers) {\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = (/**\n             * @return {?}\n             */\n            () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach((/**\n                 * @param {?} line\n                 * @return {?}\n                 */\n                line => {\n                    /** @type {?} */\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        /** @type {?} */\n                        const name = line.slice(0, index);\n                        /** @type {?} */\n                        const key = name.toLowerCase();\n                        /** @type {?} */\n                        const value = line.slice(index + 1).trim();\n                        this.maybeSetNormalizedName(name, key);\n                        if (this.headers.has(key)) {\n                            (/** @type {?} */ (this.headers.get(key))).push(value);\n                        }\n                        else {\n                            this.headers.set(key, [value]);\n                        }\n                    }\n                }));\n            });\n        }\n        else {\n            this.lazyInit = (/**\n             * @return {?}\n             */\n            () => {\n                this.headers = new Map();\n                Object.keys(headers).forEach((/**\n                 * @param {?} name\n                 * @return {?}\n                 */\n                name => {\n                    /** @type {?} */\n                    let values = headers[name];\n                    /** @type {?} */\n                    const key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        this.headers.set(key, values);\n                        this.maybeSetNormalizedName(name, key);\n                    }\n                }));\n            });\n        }\n    }\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param {?} name The header name to check for existence.\n     *\n     * @return {?} True if the header exists, false otherwise.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param {?} name The header name.\n     *\n     * @return {?} The value string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        /** @type {?} */\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @return {?} A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param {?} name The header name from which to retrieve values.\n     *\n     * @return {?} A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param {?} name The header name for which to append the values.\n     * @param {?} value The value to append.\n     *\n     * @return {?} A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param {?} name The header name.\n     * @param {?} value The value or values to set or overide for the given header.\n     *\n     * @return {?} A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param {?} name The header name.\n     * @param {?=} value The value or values to delete for the given header.\n     *\n     * @return {?} A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    /**\n     * @private\n     * @param {?} name\n     * @param {?} lcName\n     * @return {?}\n     */\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach((/**\n                 * @param {?} update\n                 * @return {?}\n                 */\n                update => this.applyUpdate(update)));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} other\n     * @return {?}\n     */\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => {\n            this.headers.set(key, (/** @type {?} */ (other.headers.get(key))));\n            this.normalizedNames.set(key, (/** @type {?} */ (other.normalizedNames.get(key))));\n        }));\n    }\n    /**\n     * @private\n     * @param {?} update\n     * @return {?}\n     */\n    clone(update) {\n        /** @type {?} */\n        const clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    /**\n     * @private\n     * @param {?} update\n     * @return {?}\n     */\n    applyUpdate(update) {\n        /** @type {?} */\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                /** @type {?} */\n                let value = (/** @type {?} */ (update.value));\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                /** @type {?} */\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                /** @type {?} */\n                const toDelete = (/** @type {?} */ (update.value));\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    /** @type {?} */\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter((/**\n                     * @param {?} value\n                     * @return {?}\n                     */\n                    value => toDelete.indexOf(value) === -1));\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => fn((/** @type {?} */ (this.normalizedNames.get(key))), (/** @type {?} */ (this.headers.get(key))))));\n    }\n}\nif (false) {\n    /**\n     * Internal map of lowercase header names to values.\n     * @type {?}\n     * @private\n     */\n    HttpHeaders.prototype.headers;\n    /**\n     * Internal map of lowercased header names to the normalized\n     * form of the name (the form seen first).\n     * @type {?}\n     * @private\n     */\n    HttpHeaders.prototype.normalizedNames;\n    /**\n     * Complete the lazy initialization of this object (needed before reading).\n     * @type {?}\n     * @private\n     */\n    HttpHeaders.prototype.lazyInit;\n    /**\n     * Queued updates to be materialized the next initialization.\n     * @type {?}\n     * @private\n     */\n    HttpHeaders.prototype.lazyUpdate;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/src/params.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n * \\@publicApi\n *\n * @record\n */\nfunction HttpParameterCodec() { }\nif (false) {\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    HttpParameterCodec.prototype.encodeKey = function (key) { };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    HttpParameterCodec.prototype.encodeValue = function (value) { };\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    HttpParameterCodec.prototype.decodeKey = function (key) { };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    HttpParameterCodec.prototype.decodeValue = function (value) { };\n}\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * \\@publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param {?} key The key name.\n     * @return {?} The encoded key name.\n     */\n    encodeKey(key) {\n        return standardEncoding(key);\n    }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param {?} value The value.\n     * @return {?} The encoded value.\n     */\n    encodeValue(value) {\n        return standardEncoding(value);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param {?} key The encoded key name.\n     * @return {?} The decoded key name.\n     */\n    decodeKey(key) {\n        return decodeURIComponent(key);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param {?} value The encoded value.\n     * @return {?} The decoded value.\n     */\n    decodeValue(value) {\n        return decodeURIComponent(value);\n    }\n}\n/**\n * @param {?} rawParams\n * @param {?} codec\n * @return {?}\n */\nfunction paramParser(rawParams, codec) {\n    /** @type {?} */\n    const map = new Map();\n    if (rawParams.length > 0) {\n        /** @type {?} */\n        const params = rawParams.split('&');\n        params.forEach((/**\n         * @param {?} param\n         * @return {?}\n         */\n        (param) => {\n            /** @type {?} */\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            /** @type {?} */\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        }));\n    }\n    return map;\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * @record\n */\nfunction Update$1() { }\nif (false) {\n    /** @type {?} */\n    Update$1.prototype.param;\n    /** @type {?|undefined} */\n    Update$1.prototype.value;\n    /** @type {?} */\n    Update$1.prototype.op;\n}\n/**\n * Options used to construct an `HttpParams` instance.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpParamsOptions() { }\nif (false) {\n    /**\n     * String representation of the HTTP parameters in URL-query-string format.\n     * Mutually exclusive with `fromObject`.\n     * @type {?|undefined}\n     */\n    HttpParamsOptions.prototype.fromString;\n    /**\n     * Object map of the HTTP parameters. Mutually exclusive with `fromString`.\n     * @type {?|undefined}\n     */\n    HttpParamsOptions.prototype.fromObject;\n    /**\n     * Encoding codec used to parse and serialize the parameters.\n     * @type {?|undefined}\n     */\n    HttpParamsOptions.prototype.encoder;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * \\@publicApi\n */\nclass HttpParams {\n    /**\n     * @param {?=} options\n     */\n    constructor(options = (/** @type {?} */ ({}))) {\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(`Cannot specify both fromString and fromObject.`);\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach((/**\n             * @param {?} key\n             * @return {?}\n             */\n            key => {\n                /** @type {?} */\n                const value = ((/** @type {?} */ (options.fromObject)))[key];\n                (/** @type {?} */ (this.map)).set(key, Array.isArray(value) ? value : [value]);\n            }));\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param {?} param The parameter name.\n     * @return {?} True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param) {\n        this.init();\n        return (/** @type {?} */ (this.map)).has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param {?} param The parameter name.\n     * @return {?} The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param) {\n        this.init();\n        /** @type {?} */\n        const res = (/** @type {?} */ (this.map)).get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param {?} param The parameter name.\n     * @return {?} All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param) {\n        this.init();\n        return (/** @type {?} */ (this.map)).get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @return {?} The parameter names in a string array.\n     */\n    keys() {\n        this.init();\n        return Array.from((/** @type {?} */ (this.map)).keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param {?} param The parameter name.\n     * @param {?} value The new value to add.\n     * @return {?} A new body with the appended value.\n     */\n    append(param, value) {\n        return this.clone({ param, value, op: 'a' });\n    }\n    /**\n     * Replaces the value for a parameter.\n     * @param {?} param The parameter name.\n     * @param {?} value The new value.\n     * @return {?} A new body with the new value.\n     */\n    set(param, value) {\n        return this.clone({ param, value, op: 's' });\n    }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param {?} param The parameter name.\n     * @param {?=} value The value to remove, if provided.\n     * @return {?} A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param, value) {\n        return this.clone({ param, value, op: 'd' });\n    }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     * @return {?}\n     */\n    toString() {\n        this.init();\n        return this.keys()\n            .map((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => {\n            /** @type {?} */\n            const eKey = this.encoder.encodeKey(key);\n            // `a: ['1']` produces `'a=1'`\n            // `b: []` produces `''`\n            // `c: ['1', '2']` produces `'c=1&c=2'`\n            return (/** @type {?} */ ((/** @type {?} */ (this.map)).get(key))).map((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => eKey + '=' + this.encoder.encodeValue(value)))\n                .join('&');\n        }))\n            // filter out empty values because `b: []` produces `''`\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n            .filter((/**\n         * @param {?} param\n         * @return {?}\n         */\n        param => param !== ''))\n            .join('&');\n    }\n    /**\n     * @private\n     * @param {?} update\n     * @return {?}\n     */\n    clone(update) {\n        /** @type {?} */\n        const clone = new HttpParams((/** @type {?} */ ({ encoder: this.encoder })));\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat([update]);\n        return clone;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach((/**\n             * @param {?} key\n             * @return {?}\n             */\n            key => (/** @type {?} */ (this.map)).set(key, (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (this.cloneFrom)).map)).get(key))))));\n            (/** @type {?} */ (this.updates)).forEach((/**\n             * @param {?} update\n             * @return {?}\n             */\n            update => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        /** @type {?} */\n                        const base = (update.op === 'a' ? (/** @type {?} */ (this.map)).get(update.param) : undefined) || [];\n                        base.push((/** @type {?} */ (update.value)));\n                        (/** @type {?} */ (this.map)).set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            /** @type {?} */\n                            let base = (/** @type {?} */ (this.map)).get(update.param) || [];\n                            /** @type {?} */\n                            const idx = base.indexOf(update.value);\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                (/** @type {?} */ (this.map)).set(update.param, base);\n                            }\n                            else {\n                                (/** @type {?} */ (this.map)).delete(update.param);\n                            }\n                        }\n                        else {\n                            (/** @type {?} */ (this.map)).delete(update.param);\n                            break;\n                        }\n                }\n            }));\n            this.cloneFrom = this.updates = null;\n        }\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpParams.prototype.map;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpParams.prototype.encoder;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpParams.prototype.updates;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpParams.prototype.cloneFrom;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/src/request.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Construction interface for `HttpRequest`s.\n *\n * All values are optional and will override default values if provided.\n * @record\n */\nfunction HttpRequestInit() { }\nif (false) {\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.headers;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.reportProgress;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.params;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.responseType;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.withCredentials;\n}\n/**\n * Determine whether the given HTTP method may include a body.\n * @param {?} method\n * @return {?}\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * \\@publicApi\n * @template T\n */\nclass HttpRequest {\n    /**\n     * @param {?} method\n     * @param {?} url\n     * @param {?=} third\n     * @param {?=} fourth\n     */\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        /** @type {?} */\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? (/** @type {?} */ (third)) : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = (/** @type {?} */ (third));\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            /** @type {?} */\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                /** @type {?} */\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                /** @type {?} */\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     * @return {?}\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return ((/** @type {?} */ (this.body))).toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     * @return {?}\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            Array.isArray(this.body)) {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    }\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    clone(update = {}) {\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        /** @type {?} */\n        const method = update.method || this.method;\n        /** @type {?} */\n        const url = update.url || this.url;\n        /** @type {?} */\n        const responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        /** @type {?} */\n        const body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        /** @type {?} */\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        /** @type {?} */\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        /** @type {?} */\n        let headers = update.headers || this.headers;\n        /** @type {?} */\n        let params = update.params || this.params;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce((/**\n                 * @param {?} headers\n                 * @param {?} name\n                 * @return {?}\n                 */\n                (headers, name) => headers.set(name, (/** @type {?} */ (update.setHeaders))[name])), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce((/**\n             * @param {?} params\n             * @param {?} param\n             * @return {?}\n             */\n            (params, param) => params.set(param, (/** @type {?} */ (update.setParams))[param])), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params,\n            headers,\n            reportProgress,\n            responseType,\n            withCredentials,\n        });\n    }\n}\nif (false) {\n    /**\n     * The request body, or `null` if one isn't set.\n     *\n     * Bodies are not enforced to be immutable, as they can include a reference to any\n     * user-defined data type. However, interceptors should take care to preserve\n     * idempotence by treating them as such.\n     * @type {?}\n     */\n    HttpRequest.prototype.body;\n    /**\n     * Outgoing headers for this request.\n     * @type {?}\n     */\n    HttpRequest.prototype.headers;\n    /**\n     * Whether this request should be made in a way that exposes progress events.\n     *\n     * Progress events are expensive (change detection runs on each event) and so\n     * they should only be requested if the consumer intends to monitor them.\n     * @type {?}\n     */\n    HttpRequest.prototype.reportProgress;\n    /**\n     * Whether this request should be sent with outgoing credentials (cookies).\n     * @type {?}\n     */\n    HttpRequest.prototype.withCredentials;\n    /**\n     * The expected response type of the server.\n     *\n     * This is used to parse the response appropriately before returning it to\n     * the requestee.\n     * @type {?}\n     */\n    HttpRequest.prototype.responseType;\n    /**\n     * The outgoing HTTP request method.\n     * @type {?}\n     */\n    HttpRequest.prototype.method;\n    /**\n     * Outgoing URL parameters.\n     * @type {?}\n     */\n    HttpRequest.prototype.params;\n    /**\n     * The outgoing URL with all URL parameters set.\n     * @type {?}\n     */\n    HttpRequest.prototype.urlWithParams;\n    /** @type {?} */\n    HttpRequest.prototype.url;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/src/response.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {number} */\nconst HttpEventType = {\n    /**\n     * The request was sent out over the wire.\n     */\n    Sent: 0,\n    /**\n     * An upload progress event was received.\n     */\n    UploadProgress: 1,\n    /**\n     * The response status code and headers were received.\n     */\n    ResponseHeader: 2,\n    /**\n     * A download progress event was received.\n     */\n    DownloadProgress: 3,\n    /**\n     * The full response including the body was received.\n     */\n    Response: 4,\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    User: 5,\n};\nHttpEventType[HttpEventType.Sent] = 'Sent';\nHttpEventType[HttpEventType.UploadProgress] = 'UploadProgress';\nHttpEventType[HttpEventType.ResponseHeader] = 'ResponseHeader';\nHttpEventType[HttpEventType.DownloadProgress] = 'DownloadProgress';\nHttpEventType[HttpEventType.Response] = 'Response';\nHttpEventType[HttpEventType.User] = 'User';\n/**\n * Base interface for progress events.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpProgressEvent() { }\nif (false) {\n    /**\n     * Progress event type is either upload or download.\n     * @type {?}\n     */\n    HttpProgressEvent.prototype.type;\n    /**\n     * Number of bytes uploaded or downloaded.\n     * @type {?}\n     */\n    HttpProgressEvent.prototype.loaded;\n    /**\n     * Total number of bytes to upload or download. Depending on the request or\n     * response, this may not be computable and thus may not be present.\n     * @type {?|undefined}\n     */\n    HttpProgressEvent.prototype.total;\n}\n/**\n * A download progress event.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpDownloadProgressEvent() { }\nif (false) {\n    /** @type {?} */\n    HttpDownloadProgressEvent.prototype.type;\n    /**\n     * The partial response body as downloaded so far.\n     *\n     * Only present if the responseType was `text`.\n     * @type {?|undefined}\n     */\n    HttpDownloadProgressEvent.prototype.partialText;\n}\n/**\n * An upload progress event.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpUploadProgressEvent() { }\nif (false) {\n    /** @type {?} */\n    HttpUploadProgressEvent.prototype.type;\n}\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpSentEvent() { }\nif (false) {\n    /** @type {?} */\n    HttpSentEvent.prototype.type;\n}\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n * \\@publicApi\n * @record\n * @template T\n */\nfunction HttpUserEvent() { }\nif (false) {\n    /** @type {?} */\n    HttpUserEvent.prototype.type;\n}\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n *\n *\n * @record\n */\nfunction HttpJsonParseError() { }\nif (false) {\n    /** @type {?} */\n    HttpJsonParseError.prototype.error;\n    /** @type {?} */\n    HttpJsonParseError.prototype.text;\n}\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpResponseBase {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     * @param {?} init\n     * @param {?=} defaultStatus\n     * @param {?=} defaultStatusText\n     */\n    constructor(init, defaultStatus = 200, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\nif (false) {\n    /**\n     * All response headers.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.headers;\n    /**\n     * Response status code.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.status;\n    /**\n     * Textual description of response status code.\n     *\n     * Do not depend on this.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.statusText;\n    /**\n     * URL of the resource retrieved, or null if not available.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.url;\n    /**\n     * Whether the status code falls in the 2xx range.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.ok;\n    /**\n     * Type of the response, narrowed to either the full response or the header.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.type;\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * \\@publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     * @param {?=} init\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.ResponseHeader;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     * @param {?=} update\n     * @return {?}\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\nif (false) {\n    /** @type {?} */\n    HttpHeaderResponse.prototype.type;\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * \\@publicApi\n * @template T\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * Construct a new `HttpResponse`.\n     * @param {?=} init\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.Response;\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    clone(update = {}) {\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\nif (false) {\n    /**\n     * The response body, or `null` if one was not returned.\n     * @type {?}\n     */\n    HttpResponse.prototype.body;\n    /** @type {?} */\n    HttpResponse.prototype.type;\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * \\@publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    /**\n     * @param {?} init\n     */\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\nif (false) {\n    /** @type {?} */\n    HttpErrorResponse.prototype.name;\n    /** @type {?} */\n    HttpErrorResponse.prototype.message;\n    /** @type {?} */\n    HttpErrorResponse.prototype.error;\n    /**\n     * Errors are never okay, even when the status code is in the 2xx success range.\n     * @type {?}\n     */\n    HttpErrorResponse.prototype.ok;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/src/client.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n * @template T\n * @param {?} options\n * @param {?} body\n * @return {?}\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n * \\@usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n *\n * \\@publicApi\n */\nclass HttpClient {\n    /**\n     * @param {?} handler\n     */\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     * @param {?} first\n     * @param {?=} url\n     * @param {?=} options\n     * @return {?}\n     */\n    request(first, url, options = {}) {\n        /** @type {?} */\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = first;\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            /** @type {?} */\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            /** @type {?} */\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams((/** @type {?} */ ({ fromObject: options.params })));\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, (/** @type {?} */ (url)), (options.body !== undefined ? options.body : null), {\n                headers,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        /** @type {?} */\n        const events$ = of(req).pipe(concatMap((/**\n         * @param {?} req\n         * @return {?}\n         */\n        (req) => this.handler.handle(req))));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        /** @type {?} */\n        const res$ = (/** @type {?} */ (events$.pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => event instanceof HttpResponse)))));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        })));\n                    case 'blob':\n                        return res$.pipe(map((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        })));\n                    case 'text':\n                        return res$.pipe(map((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        })));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => res.body)));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param {?} url     The endpoint URL.\n     * @param {?=} options The HTTP options to send with the request.\n     *\n     * @return {?}\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @template T\n     * @param {?} url The resource URL.\n     * @param {?} callbackParam The callback function name.\n     *\n     * @return {?}\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilites of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n}\nHttpClient.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHttpClient.ctorParameters = () => [\n    { type: HttpHandler }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpClient.prototype.handler;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/src/interceptor.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Intercepts and handles an `HttpRequest` or `HttpResponse`.\n *\n * Most interceptors transform the outgoing request before passing it to the\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\n * An interceptor may transform the\n * response event stream as well, by applying additional RxJS operators on the stream\n * returned by `next.handle()`.\n *\n * More rarely, an interceptor may handle the request entirely,\n * and compose a new event stream instead of invoking `next.handle()`. This is an\n * acceptable behavior, but keep in mind that further interceptors will be skipped entirely.\n *\n * It is also rare but valid for an interceptor to return multiple responses on the\n * event stream for a single request.\n *\n * \\@publicApi\n *\n * @see [HTTP Guide](guide/http#intercepting-requests-and-responses)\n *\n * \\@usageNotes\n *\n * To use the same instance of `HttpInterceptors` for the entire app, import the `HttpClientModule`\n * only in your `AppModule`, and add the interceptors to the root application injector .\n * If you import `HttpClientModule` multiple times across different modules (for example, in lazy\n * loading modules), each import creates a new copy of the `HttpClientModule`, which overwrites the\n * interceptors provided in the root module.\n *\n * @record\n */\nfunction HttpInterceptor() { }\nif (false) {\n    /**\n     * Identifies and handles a given HTTP request.\n     * @param {?} req The outgoing request object to handle.\n     * @param {?} next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @return {?} An observable of the event stream.\n     */\n    HttpInterceptor.prototype.intercept = function (req, next) { };\n}\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nclass HttpInterceptorHandler {\n    /**\n     * @param {?} next\n     * @param {?} interceptor\n     */\n    constructor(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    handle(req) {\n        return this.interceptor.intercept(req, this.next);\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptorHandler.prototype.next;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptorHandler.prototype.interceptor;\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * \\@publicApi\n * @type {?}\n */\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\nclass NoopInterceptor {\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    intercept(req, next) {\n        return next.handle(req);\n    }\n}\nNoopInterceptor.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/src/jsonp.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\n/** @type {?} */\nlet nextRequestId = 0;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\n/** @type {?} */\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\n/** @type {?} */\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\n/** @type {?} */\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n * @abstract\n */\nclass JsonpCallbackContext {\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * \\@publicApi\n */\nclass JsonpClientBackend {\n    /**\n     * @param {?} callbackMap\n     * @param {?} document\n     */\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     * @private\n     * @return {?}\n     */\n    nextCallback() {\n        return `ng_jsonp_callback_${nextRequestId++}`;\n    }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param {?} req The request object.\n     * @return {?} An observable of the response events.\n     *\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            /** @type {?} */\n            const callback = this.nextCallback();\n            /** @type {?} */\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            /** @type {?} */\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            /** @type {?} */\n            let body = null;\n            // Whether the response callback has been called.\n            /** @type {?} */\n            let finished = false;\n            // Whether the request has been cancelled (and thus any other callbacks)\n            // should be ignored.\n            /** @type {?} */\n            let cancelled = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (/**\n             * @param {?=} data\n             * @return {?}\n             */\n            (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Next, make sure the request wasn't cancelled in the meantime.\n                if (cancelled) {\n                    return;\n                }\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            });\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            /** @type {?} */\n            const cleanup = (/**\n             * @return {?}\n             */\n            () => {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            });\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            /** @type {?} */\n            const onLoad = (/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                // Do nothing if the request has been cancelled.\n                if (cancelled) {\n                    return;\n                }\n                // Cleanup the page.\n                cleanup();\n                // Check whether the response callback has run.\n                if (!finished) {\n                    // It hasn't, something went wrong with the request. Return an error via\n                    // the Observable error path. All JSONP errors have status 0.\n                    observer.error(new HttpErrorResponse({\n                        url,\n                        status: 0,\n                        statusText: 'JSONP Error',\n                        error: new Error(JSONP_ERR_NO_CALLBACK),\n                    }));\n                    return;\n                }\n                // Success. body either contains the response body or null if none was\n                // returned.\n                observer.next(new HttpResponse({\n                    body,\n                    status: 200,\n                    statusText: 'OK',\n                    url,\n                }));\n                // Complete the stream, the response is over.\n                observer.complete();\n            });\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            /** @type {?} */\n            const onError = (/**\n             * @param {?} error\n             * @return {?}\n             */\n            (error) => {\n                // If the request was already cancelled, no need to emit anything.\n                if (cancelled) {\n                    return;\n                }\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error',\n                    url,\n                }));\n            });\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return (/**\n             * @return {?}\n             */\n            () => {\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\n                cancelled = true;\n                // Remove the event listeners so they won't run if the events later fire.\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // And finally, clean up the page.\n                cleanup();\n            });\n        }));\n    }\n}\nJsonpClientBackend.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nJsonpClientBackend.ctorParameters = () => [\n    { type: JsonpCallbackContext },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    JsonpClientBackend.prototype.callbackMap;\n    /**\n     * @type {?}\n     * @private\n     */\n    JsonpClientBackend.prototype.document;\n}\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * \\@publicApi\n */\nclass JsonpInterceptor {\n    /**\n     * @param {?} jsonp\n     */\n    constructor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param {?} req The outgoing request object to handle.\n     * @param {?} next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @return {?} An observable of the event stream.\n     */\n    intercept(req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle((/** @type {?} */ (req)));\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    }\n}\nJsonpInterceptor.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nJsonpInterceptor.ctorParameters = () => [\n    { type: JsonpClientBackend }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    JsonpInterceptor.prototype.jsonp;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/src/xhr.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * \\@publicApi\n * @abstract\n */\nclass XhrFactory {\n}\nif (false) {\n    /**\n     * @abstract\n     * @return {?}\n     */\n    XhrFactory.prototype.build = function () { };\n}\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n *\n */\nclass BrowserXhr {\n    constructor() { }\n    /**\n     * @return {?}\n     */\n    build() {\n        return (/** @type {?} */ ((new XMLHttpRequest())));\n    }\n}\nBrowserXhr.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nBrowserXhr.ctorParameters = () => [];\n/**\n * Tracks a response from the server that does not yet have a body.\n * @record\n */\nfunction PartialResponse() { }\nif (false) {\n    /** @type {?} */\n    PartialResponse.prototype.headers;\n    /** @type {?} */\n    PartialResponse.prototype.status;\n    /** @type {?} */\n    PartialResponse.prototype.statusText;\n    /** @type {?} */\n    PartialResponse.prototype.url;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * \\@publicApi\n */\nclass HttpXhrBackend {\n    /**\n     * @param {?} xhrFactory\n     */\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param {?} req The request object.\n     * @return {?} An observable of the response events.\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the JsonpClientModule\n        if (req.method === 'JSONP') {\n            throw new Error(`Attempted to construct Jsonp request without JsonpClientModule installed.`);\n        }\n        // Everything happens on Observable subscription.\n        return new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            /** @type {?} */\n            const xhr = this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach((/**\n             * @param {?} name\n             * @param {?} values\n             * @return {?}\n             */\n            (name, values) => xhr.setRequestHeader(name, values.join(','))));\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                /** @type {?} */\n                const detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                /** @type {?} */\n                const responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = (/** @type {?} */ (((responseType !== 'json') ? responseType : 'text')));\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            /** @type {?} */\n            const reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            /** @type {?} */\n            let headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            /** @type {?} */\n            const partialFromXhr = (/**\n             * @return {?}\n             */\n            () => {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\n                /** @type {?} */\n                const status = xhr.status === 1223 ? 204 : xhr.status;\n                /** @type {?} */\n                const statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                /** @type {?} */\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                /** @type {?} */\n                const url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers, status, statusText, url });\n                return headerResponse;\n            });\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            /** @type {?} */\n            const onLoad = (/**\n             * @return {?}\n             */\n            () => {\n                // Read response state from the memoized partial data.\n                let { headers, status, statusText, url } = partialFromXhr();\n                // The body will be read out if present.\n                /** @type {?} */\n                let body = null;\n                if (status !== 204) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                /** @type {?} */\n                let ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    /** @type {?} */\n                    const originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = (/** @type {?} */ ({ error, text: body }));\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                }\n            });\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            /** @type {?} */\n            const onError = (/**\n             * @param {?} error\n             * @return {?}\n             */\n            (error) => {\n                const { url } = partialFromXhr();\n                /** @type {?} */\n                const res = new HttpErrorResponse({\n                    error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                    url: url || undefined,\n                });\n                observer.error(res);\n            });\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            /** @type {?} */\n            let sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            /** @type {?} */\n            const onDownProgress = (/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                /** @type {?} */\n                let progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            });\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            /** @type {?} */\n            const onUpProgress = (/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                /** @type {?} */\n                let progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            });\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send((/** @type {?} */ (reqBody)));\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return (/**\n             * @return {?}\n             */\n            () => {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('load', onLoad);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                xhr.abort();\n            });\n        }));\n    }\n}\nHttpXhrBackend.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHttpXhrBackend.ctorParameters = () => [\n    { type: XhrFactory }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXhrBackend.prototype.xhrFactory;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/src/xsrf.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\n/** @type {?} */\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpXsrfTokenExtractor {\n}\nif (false) {\n    /**\n     * Get the XSRF token to use with an outgoing request.\n     *\n     * Will be called for every request, so the token may change between requests.\n     * @abstract\n     * @return {?}\n     */\n    HttpXsrfTokenExtractor.prototype.getToken = function () { };\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    /**\n     * @param {?} doc\n     * @param {?} platform\n     * @param {?} cookieName\n     */\n    constructor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * \\@internal for testing\n         */\n        this.parseCount = 0;\n    }\n    /**\n     * @return {?}\n     */\n    getToken() {\n        if (this.platform === 'server') {\n            return null;\n        }\n        /** @type {?} */\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n}\nHttpXsrfCookieExtractor.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHttpXsrfCookieExtractor.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_COOKIE_NAME,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.lastCookieString;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.lastToken;\n    /**\n     * \\@internal for testing\n     * @type {?}\n     */\n    HttpXsrfCookieExtractor.prototype.parseCount;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.doc;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.platform;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.cookieName;\n}\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    /**\n     * @param {?} tokenService\n     * @param {?} headerName\n     */\n    constructor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    intercept(req, next) {\n        /** @type {?} */\n        const lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        /** @type {?} */\n        const token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    }\n}\nHttpXsrfInterceptor.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHttpXsrfInterceptor.ctorParameters = () => [\n    { type: HttpXsrfTokenExtractor },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_HEADER_NAME,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfInterceptor.prototype.tokenService;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfInterceptor.prototype.headerName;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/src/module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\nclass HttpInterceptingHandler {\n    /**\n     * @param {?} backend\n     * @param {?} injector\n     */\n    constructor(backend, injector) {\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    handle(req) {\n        if (this.chain === null) {\n            /** @type {?} */\n            const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n            this.chain = interceptors.reduceRight((/**\n             * @param {?} next\n             * @param {?} interceptor\n             * @return {?}\n             */\n            (next, interceptor) => new HttpInterceptorHandler(next, interceptor)), this.backend);\n        }\n        return this.chain.handle(req);\n    }\n}\nHttpInterceptingHandler.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHttpInterceptingHandler.ctorParameters = () => [\n    { type: HttpBackend },\n    { type: Injector }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptingHandler.prototype.chain;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptingHandler.prototype.backend;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptingHandler.prototype.injector;\n}\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n * @param {?} backend\n * @param {?=} interceptors\n * @return {?}\n */\nfunction interceptingHandler(backend, interceptors = []) {\n    if (!interceptors) {\n        return backend;\n    }\n    return interceptors.reduceRight((/**\n     * @param {?} next\n     * @param {?} interceptor\n     * @return {?}\n     */\n    (next, interceptor) => new HttpInterceptorHandler(next, interceptor)), backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n * @return {?}\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * \\@publicApi\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     * @return {?}\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param {?=} options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     * @return {?}\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    }\n}\nHttpClientXsrfModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [\n                    HttpXsrfInterceptor,\n                    { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                    { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                    { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                    { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                ],\n            },] }\n];\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * \\@publicApi\n */\nclass HttpClientModule {\n}\nHttpClientModule.decorators = [\n    { type: NgModule, args: [{\n                /**\n                 * Optional configuration for XSRF protection.\n                 */\n                imports: [\n                    HttpClientXsrfModule.withOptions({\n                        cookieName: 'XSRF-TOKEN',\n                        headerName: 'X-XSRF-TOKEN',\n                    }),\n                ],\n                /**\n                 * Configures the [dependency injector](guide/glossary#injector) where it is imported\n                 * with supporting services for HTTP communications.\n                 */\n                providers: [\n                    HttpClient,\n                    { provide: HttpHandler, useClass: HttpInterceptingHandler },\n                    HttpXhrBackend,\n                    { provide: HttpBackend, useExisting: HttpXhrBackend },\n                    BrowserXhr,\n                    { provide: XhrFactory, useExisting: BrowserXhr },\n                ],\n            },] }\n];\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * \\@publicApi\n */\nclass HttpClientJsonpModule {\n}\nHttpClientJsonpModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [\n                    JsonpClientBackend,\n                    { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                    { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n                ],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/http/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpErrorResponse, HttpEventType, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, HttpInterceptingHandler as ɵHttpInterceptingHandler, NoopInterceptor as ɵangular_packages_common_http_http_a, JsonpCallbackContext as ɵangular_packages_common_http_http_b, jsonpCallbackContext as ɵangular_packages_common_http_http_c, BrowserXhr as ɵangular_packages_common_http_http_d, XSRF_COOKIE_NAME as ɵangular_packages_common_http_http_e, XSRF_HEADER_NAME as ɵangular_packages_common_http_http_f, HttpXsrfCookieExtractor as ɵangular_packages_common_http_http_g, HttpXsrfInterceptor as ɵangular_packages_common_http_http_h };\n//# sourceMappingURL=http.js.map\n","import { Injectable } from '@angular/core';\r\nimport { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { Product } from 'src/app/models/product';\r\nimport { ProductService } from './services/product.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class GetProductResolver implements Resolve<Product> {\r\n    constructor(private productService: ProductService) { }\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Product | import(\"rxjs\").Observable<Product> | Promise<Product> {\r\n        const id = +route.paramMap.get('id');\r\n        const pr = this.productService.getProduct(id);\r\n        console.log(`this id is: ${id}. the product is: ${pr}`);\r\n        return pr;\r\n    }\r\n}\r\n","<form #productForm=\"ngForm\" (ngSubmit)=\"submitTheForm()\">\n    <label for=\"productName\">Name</label>\n    <input autocomplete=\"off\" #productName=\"ngModel\" type=\"text\" name=\"productName\" id=\"productName\" required\n        minlength=\"3\" maxlength=\"10\" [(ngModel)]=\"product.name\" appNoSpace=\"3\">\n    <div style=\"color:red;\" [hidden]=\"!productName.errors?.required\">product name is required</div>\n    <div style=\"color:red;\" [hidden]=\"!productName.errors?.minlength\">product name is less than 3 characters long</div>\n    <div style=\"color:red;\" [hidden]=\"!productName.errors?.somekey\">product name cannot be just spaces</div>\n    <br>\n    <label for=\"brandDD\">Brand</label>\n    <select name=\"productBrandDD\" id=\"productBrandDD\" [(ngModel)]=\"product.brand\" #productBrand=\"ngModel\" required>\n        <option *ngFor=\"let brand of brands$ | async\">{{brand.name}}</option>\n    </select>\n    <div style=\"color:red;\" [hidden]=\"productBrand.pristine || productBrand.valid\">product brand is invalid</div>\n    <br>\n    <label for=\"productFragile\">Fragile</label>\n    <input type=\"checkbox\" name=\"productFragile\" id=\"productFragile\" [(ngModel)]=\"product.fragile\" #productFragile=\"ngModel\" />\n    <br>\n    <div>\n        <h3>Product Tags</h3>\n        <button type=\"button\" (click)=\"addTagTD()\">Add Tag</button> <br/>\n        <div *ngFor=\"let tag of tagArray; let i=index; let odd=odd; let evenIndex=even;\">\n            <input #forTag type=\"text\" [value]=\"tag\" required minlength=\"3\" maxlength=\"10\" >\n        </div>\n    </div>\n    <input type=\"submit\" [disabled]=\"productForm.invalid\" value=\"Submit\" />\n</form>\n\n{{message}}\n<br>\n<br>\n<br>\n\n<form [formGroup]=\"addProductForm\" (ngSubmit)=\"submitTheFormRF()\">\n    <label for=\"productName\">Name</label>\n    <input autocomplete=\"off\" type=\"text\" name=\"productName\" id=\"productName\" formControlName=\"name\">\n    <div style=\"color:red;\" [hidden]=\"!name.errors?.required\">product name is required</div>\n    <div style=\"color:red;\" [hidden]=\"!name.errors?.minlength\">product name is less than 3 characters long</div>\n    <div style=\"color:red;\" [hidden]=\"!name.errors?.somekey\">product name cannot be just spaces</div>\n    <br>\n    <label for=\"brandDD\">Brand</label>\n    <select name=\"productBrandDD\" id=\"productBrandDD\" formControlName=\"brand\">\n        <option *ngFor=\"let brand of brands$ | async\">{{brand.name}}</option>\n    </select>\n    <div style=\"color:red;\" [hidden]=\"productBrand.pristine || productBrand.valid\">product brand is invalid</div>\n    <br>\n    <label for=\"productFragile\">Fragile</label>\n    <input type=\"checkbox\" name=\"productFragile\" id=\"productFragile\" formControlName=\"fragile\" />\n    <br>\n    <div formArrayName=\"tags\">\n        <h3>Product Tags</h3>\n        <button type=\"button\" (click)=\"addTag()\">Add Tag</button> <br/>\n        <div *ngFor=\"let tag of tags.controls; let i=index; let odd=odd; let evenIndex=even;\">\n            <input type=\"text\" [formControlName]=\"i\">\n        </div>\n    </div>\n    <input type=\"submit\" [disabled]=\"addProductForm.invalid\" value=\"Submit\" />\n    \n</form>\n","import { Component, OnInit, ViewChild, ViewChildren } from '@angular/core';\r\nimport { Product, Brand } from 'src/app/models/product';\r\nimport { ProductService } from '../services/product.service';\r\nimport { Observable } from 'rxjs';\r\nimport { ICanDeactivate } from 'src/app/shared/can-deactivate.guard';\r\nimport { FormBuilder, Validators, FormGroup, FormArray, FormControl, ValidationErrors, ValidatorFn } from '@angular/forms';\r\nimport { noSpaces2 } from '../../../shared/custom-validators';\r\n\r\n@Component({\r\n  selector: 'app-add-product',\r\n  templateUrl: './add-product.component.html',\r\n  styleUrls: ['./add-product.component.css']\r\n})\r\nexport class AddProductComponent implements OnInit, ICanDeactivate {\r\n  @ViewChild('productForm') productForm: any;\r\n  @ViewChildren('forTag') tagsTD: any;\r\n  product: Product;\r\n  productRF: Product;\r\n  message: string;\r\n  brands$: Observable<Brand[]>;\r\n  addProductForm: FormGroup;\r\n  constructor(private productService: ProductService, private formBuilder: FormBuilder) { }\r\n\r\n  canComponentBeDeactivated(): boolean {\r\n    const b = this.productForm.dirty && !this.productForm.submitted;\r\n    if (b) {\r\n      return confirm('Unsaved changes!! do you still want to navigate away?');\r\n    }\r\n    return true;\r\n  }\r\n  \r\n  ngOnInit(): void {\r\n    // this.product = { id: 0, name: '', brand: null, likeCount: 0 };\r\n    this.product = new Product();\r\n    console.log(this.product.fragile);\r\n    this.brands$ = this.productService.getBrands();\r\n\r\n    this.addProductForm = this.formBuilder.group({\r\n      name: [{ value: 'dd', disabled: false }, [Validators.required, Validators.minLength(3), Validators.maxLength(10), noSpaces2(3)]],\r\n      brand: [null, [Validators.required]],\r\n      fragile: [],\r\n      tags: this.formBuilder.array([this.formBuilder.control('init', [Validators.required, Validators.minLength(3), Validators.maxLength(10)])])\r\n    });\r\n  }\r\n\r\n  public get tags(): FormArray {\r\n    return this.addProductForm.get('tags') as FormArray;\r\n  }\r\n\r\n  public get name(): FormControl {\r\n    return this.addProductForm.get('name') as FormControl;\r\n  }  \r\n\r\n  addTag() {\r\n    this.tags.push(this.formBuilder.control('new', [Validators.required, Validators.minLength(3), Validators.maxLength(10)]))\r\n    console.log(this.addProductForm.value);\r\n    console.log(this.tags.value);\r\n    console.log(this.tags.status);\r\n  }\r\n  tagArray = ['init'];\r\n  addTagTD() {\r\n    this.tagArray.push('new');\r\n    console.log(this.productForm);\r\n    console.log(this.tagsTD);\r\n    \r\n  }\r\n\r\n\r\n  submitTheFormRF() {\r\n    this.productRF = new Product();\r\n    this.productRF.name = this.addProductForm.get('name').value;\r\n    this.productRF.brand = this.addProductForm.get('brand').value;\r\n    this.productRF.fragile = this.addProductForm.get('fragile').value;\r\n\r\n    console.log(this.productRF);\r\n\r\n    this.productService.addProduct(this.productRF);\r\n    this.message = \"The product was added.\";\r\n\r\n\r\n  }\r\n  submitTheForm() {\r\n    this.productService.addProduct(this.product);\r\n    this.message = \"The product was added.\";\r\n  }\r\n}\r\n","<form [formGroup]=\"productFormGroup\" (ngSubmit)=\"submitTheForm()\">\n    <label for=\"productName\">Name</label>\n    <input autocomplete=\"off\" type=\"text\" id=\"productName\"\n        minlength=\"3\" maxlength=\"10\" formControlName=\"name\" >\n    <span *ngIf=\"productFormGroup.get('name').errors\" style=\"color:red;\">product name is invalid</span>\n    <br>\n    <label for=\"brandDD\">Brand</label>\n    <select id=\"productBrandDD\" formControlName=\"brand\">\n        <option *ngFor=\"let brand of brands$ | async\">{{brand.name}}</option>\n    </select>\n    <span *ngIf=\"productFormGroup.get('brand').errors\" style=\"color:red;\">product name is invalid</span>\n    <br>\n    <label for=\"productFragile\">Fragile</label>\n    <input type=\"checkbox\" id=\"productFragile\" formControlName=\"fragile\" />\n    <br>\n    <!-- <input type=\"submit\" value=\"Submit\" disabled=\"productFormGroup.invalid\"  /> -->\n    <input type=\"submit\" value=\"Submit\" />\n    {{productFormGroup.errors}}\n</form>\n\n<div style=\"color: green;\">{{message}}</div>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ProductService } from '../services/product.service';\nimport { Product, Brand } from 'src/app/models/product';\nimport { Observable } from 'rxjs';\nimport { FormControl, Validators, FormGroup, FormBuilder } from '@angular/forms';\n\n@Component({\n  selector: 'app-edit-product',\n  templateUrl: './edit-product.component.html',\n  styleUrls: ['./edit-product.component.css']\n})\nexport class EditProductComponent implements OnInit {\n\n  // id: number;\n  // product$: Observable<Product>;\n  product: Product;\n  message: string;\n  brands$: Observable<Brand[]>;\n  productFormGroup: FormGroup;\n\n  constructor(private route: ActivatedRoute, private productService: ProductService,\n    private fb: FormBuilder) { }\n\n  ngOnInit(): void {\n    // this.id = this.route.snapshot.params['id'];\n    // this.product$ = this.productService.getProduct(this.id);\n    this.brands$ = this.productService.getBrands();\n\n    this.product = this.route.snapshot.data['retrievedProduct'];\n\n    this.productFormGroup = this.fb.group({\n      name: [{ value: this.product.name, disabled: false }, [Validators.required, Validators.minLength(3), Validators.maxLength(10)]],\n      brand: [{ value: this.product.brand, disabled: false }, [Validators.required]],\n      fragile: [{ value: this.product.fragile, disabled: false }]\n    });\n\n    this.productFormGroup.patchValue({name: 'test', brand: this.product.brand});\n\n    console.log(this.product);\n  }\n\n  submitTheForm() {\n    console.log(this.product);\n    console.log(this.productFormGroup.value);\n\n    // this.product.name = this.productFormGroup.get('name').value;\n    // this.product.brand = this.productFormGroup.get('brand').value;\n    // this.product.fragile = this.productFormGroup.get('fragile').value;\n\n    const id = this.product.id;\n    this.product = this.productFormGroup.value;\n    this.product.id = id;\n    console.log(this.product);\n    console.log(this.productFormGroup.value);\n\n    this.productService.updateProduct(this.product);\n    this.message = \"The product was updated.\";\n\n  }\n\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ProductComponent } from './product/product.component';\r\nimport { ProductsComponent } from './products/products.component';\r\nimport { ProductService } from './services/product.service';\r\nimport { AddProductComponent } from './add-product/add-product.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { EditProductComponent } from './edit-product/edit-product.component';\r\nimport { AuthenticationGuard } from 'src/app/shared/auth.guard';\r\nimport { AuthorizationGuardGuard } from 'src/app/shared/authorization-guard.guard';\r\nimport { CanDeactivateGuard } from 'src/app/shared/can-deactivate.guard';\r\nimport { GetProductResolver } from './GetProductResolver';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [ProductsComponent, ProductComponent, AddProductComponent, EditProductComponent],\r\n  imports: [\r\n    CommonModule,\r\n    SharedModule,\r\n    HttpClientModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    RouterModule.forChild([{ path: '', component: ProductsComponent },\r\n    { path: 'products', component: ProductsComponent },\r\n    {\r\n      path: 'add', component: AddProductComponent\r\n      , canActivate: [AuthenticationGuard, AuthorizationGuardGuard], canDeactivate: [CanDeactivateGuard]\r\n    },\r\n    {\r\n      path: 'edit/:id', component: EditProductComponent\r\n      , canActivate: [AuthenticationGuard, AuthorizationGuardGuard], canDeactivate: [CanDeactivateGuard],\r\n      resolve: { retrievedProduct: GetProductResolver}\r\n    },\r\n    ])\r\n  ],\r\n  providers: [GetProductResolver],\r\n  exports: []\r\n})\r\nexport class ProductManagementModule { }\r\n\r\n","<!-- <td>{{product.id}}</td> -->\r\n<div>{{product.name | uppercase}}</div>\r\n<div>{{product.brand?.name | mixedCase : 'some input for the pipe'}} </div>\r\n<div>{{product.fragile}} </div>\r\n<div>{{product.price | currency}} </div>\r\n<div>{{product.sellBy | date: 'dd/MM/yyyy'}} </div>\r\n<div (click)=\"handleLikeClicked()\">{{product.likeCount}}<span>&nbsp;&nbsp;click to like</span></div>\r\n<a href='products/edit/{{product.id}}' >Edit</a>\r\n<hr/>","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { Product } from 'src/app/models/product';\n\n@Component({\n  selector: 'app-product',\n  templateUrl: './product.component.html',\n  styleUrls: ['./product.component.css']\n})\nexport class ProductComponent implements OnInit {\n  @Input() product: Product;\n  @Output('likeCountChanged') likeCountChanged = new EventEmitter<Product>();\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n  handleLikeClicked() {\n    this.product.likeCount++;\n    this.likeCountChanged.emit(this.product);\n  }\n}\n","<app-product *ngFor=\"let prod of products\" [product]=\"prod\" (likeCountChanged)=\"handleLikeCountChanged()\"></app-product>\r\n<!-- \r\n<app-product *ngFor=\"let prod of products$ | async\" [product]=\"prod\" (likeCountChanged)=\"handleLikeCountChanged()\">\r\n</app-product> -->\r\n\r\n<a routerLink=\"add\" appHoverHiglight [appHighlightColor]=\"{backColor: 'black', foreColor: 'wheat'}\">Add product</a>\r\n\r\n<input type=\"button\" value=\"Add default product\" (click)=\"addDefaultProduct()\">","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Product } from 'src/app/models/product';\nimport { Title } from '@angular/platform-browser';\nimport { ProductService } from '../services/product.service';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-products',\n  templateUrl: './products.component.html',\n  styleUrls: ['./products.component.css']\n})\nexport class ProductsComponent implements OnInit, OnDestroy {\n  products: Product[] = [];\n  products$: Observable<Product[]>;\n  productSubscription: Subscription;\n\n  message: string;\n\n  constructor(private titleService: Title, private productService: ProductService) { }\n\n  ngOnInit(): void {\n    this.titleService.setTitle('Products');\n    this.products$ = this.productService.getProducts();\n    this.productSubscription = this.products$.subscribe((data) => { this.products = data; }\n      , (err) => console.error(err), () => { });\n    this.products = this.products.sort((a, b) => b.likeCount - a.likeCount);\n  }\n  handleLikeCountChanged() {\n    this.products = this.products.sort((a, b) => b.likeCount - a.likeCount);\n  }\n  ngOnDestroy(): void {\n    this.productSubscription.unsubscribe();\n  }\n\n  addDefaultProduct() {\n    const product = new Product();\n    product.name = \"Fourth\";\n    // product.brand = \"Dell\";\n    this.productService.addProduct(product);\n    this.message = \"The product was added.\";\n  }\n}\n\n\n","import { Injectable } from '@angular/core';\nimport { Product, Brand } from 'src/app/models/product';\nimport { HttpClient } from '@angular/common/http';\nimport { ProductManagementModule } from '../product-management.module';\nimport { of, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: ProductManagementModule\n})\nexport class ProductService {\n  products = [];\n  brands = [];\n\n  constructor(private httpClient: HttpClient) { }\n\n  addProduct(product: Product) {\n    const newid = this.products.sort((a, b) => b.id - a.id)[0] + 1;\n    product.id = newid;\n    this.products.push(product);\n  }\n  updateProduct(product: Product): string {\n    let p: Product = this.products.find(f => f.id === product.id);\n    p.brand = product.brand;\n    p.name = product.name;\n    p.fragile = product.fragile;\n\n    return \"Updated.\";\n  }\n\n  getProducts(): Observable<Product[]> {\n    if (this.products.length > 0) {\n      return of(this.products);\n    }\n    let brands = [];\n    this.getBrands().subscribe(data => brands = data, err => console.error(err), () => { });\n    const p1 = new Product();\n    p1.id = 1;\n    p1.name = 'Laptop1';\n    p1.brand = brands.find(b => b.name === 'Lenovo');\n    p1.price = 199;\n    p1.sellBy = new Date();\n    this.products.push(p1);\n\n    const p2 = new Product();\n    p2.id = 2;\n    p2.name = 'Laptop2';\n    p2.brand = brands.find(b => b.name === 'Dell');\n    p2.likeCount = 1;\n    p2.price = 199;\n    p2.sellBy = new Date('30-DEC-2020');\n    this.products.push(p2);\n\n    return of(this.products);\n  }\n  getProduct(id: number): Observable<Product> {\n    this.getProducts().subscribe();\n    if (this.products) {\n      return of(this.products.find(f => f.id === id));\n    } else {\n      return of(null);\n    }\n  }\n\n  getBrands(): Observable<Brand[]> {\n    if (this.brands.length > 0) {\n      return of(this.brands);\n    }\n    const p1 = new Brand();\n    p1.id = 1;\n    p1.name = 'Lenovo';\n    this.brands.push(p1);\n\n    const p2 = new Brand();\n    p2.id = 2;\n    p2.name = 'Dell';\n    this.brands.push(p2);\n\n    const p3 = new Brand();\n    p3.id = 3;\n    p3.name = 'Apple';\n    this.brands.push(p3);\n\n    return of(this.brands);\n  }\n}\n","export class Product {\n    id: Number;\n    name: string;\n    brand: Brand;\n    fragile = true;\n    likeCount: number = 0;\n    price: number;\n    sellBy: Date;\n}\n\nexport class Brand {\n    id: number;\n    name: string;\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { UserService } from '../services/user.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationGuard implements CanActivate {\n  constructor(private userService: UserService) { }\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    return true;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthorizationGuardGuard implements CanActivate {\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    return true;\n  }\n  \n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree, CanDeactivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nexport interface ICanDeactivate {\n  canComponentBeDeactivated(): boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CanDeactivateGuard implements CanDeactivate<ICanDeactivate> {\n  canDeactivate(\n    component: ICanDeactivate): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    return component.canComponentBeDeactivated ? component.canComponentBeDeactivated() : true;\n  }\n  \n}\n","import { AbstractControl, ValidationErrors, FormControl, ValidatorFn } from '@angular/forms';\r\n\r\nexport function noSpaces(control: AbstractControl): ValidationErrors | null {\r\n  const spacesRegex = `^\\\\s{${3},}$`;\r\n  const regex = new RegExp(spacesRegex);\r\n  const isJustSpaces = regex.test(control.value);\r\n\r\n  if (isJustSpaces) {\r\n    return { somekey: true };\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function noSpaces2(num: number): ValidatorFn {\r\n    return (c: FormControl): ValidationErrors | null => {\r\n      const spacesRegex = `^\\\\s{${num},}$`;\r\n      const regex = new RegExp(spacesRegex);\r\n      const isJustSpaces = regex.test(c.value);\r\n      if (isJustSpaces) {\r\n        return {somekey: true};\r\n      }\r\n      return null;\r\n    };\r\n  }","import { Directive, ElementRef, Input, HostListener } from '@angular/core';\nimport { BackForeColors } from '../models/BackForeColors';\n\n@Directive({\n  selector: '[appHoverHiglight]'\n})\nexport class HoverHiglightDirective {\n\n  constructor(private element: ElementRef) {\n    // console.log(this.element);\n    // console.log(this.element.nativeElement);\n    // this.element.nativeElement.style.backgroundColor = 'yellow';    \n  }\n\n  @Input() appHighlightColor: BackForeColors;\n  @HostListener('mouseenter') onMouseEnter() {    \n    this.element.nativeElement.style.color = this.appHighlightColor.foreColor;\n    this.element.nativeElement.style.backgroundColor = this.appHighlightColor.backColor;\n  }\n  @HostListener('mouseleave') onMouseLeave() {\n    this.element.nativeElement.style.color = null;\n    this.element.nativeElement.style.backgroundColor = null;\n  }\n\n}","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'mixedCase'\n})\nexport class MixedCasePipe implements PipeTransform {\n\n  transform(value: string, ...args: string[]): string {\n    console.log(args);\n    \n    const v = [...value];\n    // tslint:disable-next-line:prefer-for-of\n    for (let i = 0; i < value.length; i++) {\n      if (i % 2 === 0) {\n        v[i] = value[i].toUpperCase();\n      } else {\n        v[i] = value[i].toLowerCase();\n      }\n    }\n    return v.join('');\n  }\n\n}\n","import { Directive, Input } from '@angular/core';\nimport { Validator, AbstractControl, ValidationErrors, NG_VALIDATORS } from '@angular/forms';\nimport { noSpaces2 } from './custom-validators';\n\n@Directive({\n  selector: '[appNoSpace]',\n  providers: [{provide: NG_VALIDATORS, useExisting: NoSpaceDirective, multi: true}]\n})\nexport class NoSpaceDirective implements Validator {\n  @Input('appNoSpace') num: number;\n\n  constructor() { }\n  validate(control: AbstractControl): ValidationErrors {\n    // return noSpaces(control);\n    return this.num ? noSpaces2(this.num)(control) : null;\n  }\n  // registerOnValidatorChange?(fn: () => void): void {\n  //   throw new Error(\"Method not implemented.\");\n  // }\n\n}\n"]}